@skip { whitespace | LineComment | BlockComment }

@top Program { compstatement }

semi { ";" | "\n" }

compstatement {
	statement (semi expression)? semi?
}

statement {
	expression
}

expression {
	AssignmentExpression
}

AssignmentExpression {
	LeftHandSide "=" Arg
}

LeftHandSide {
	Variable
}

Arg {
	AssignmentExpression |
	Primary
}

Primary {
	Literal |
	Variable |
	kw<"def"> FunctionName ArgDeclaration compstatement kw<"end">
}

ArgDeclaration {
	"(" ArgumentList ")" |
	ArgumentList semi
}

ArgumentList {
	identifier ("," identifier)* ("," restArgument)? ("," closureArgument)? |
	restArgument ("," closureArgument)? |
	closureArgument?
}

restArgument {
	"*" identifier
}

closureArgument {
	"&" identifier
}

Variable {
	VarName | kw<"nil"> | kw<"self">
}

Literal {
	String |
	Number |
	boolean |
	Symbol
}

VarName {
	global |
	localVariable |
	identifier
}

localVariable {
	"@" identifier
}

global {
	"$" identifier
}

Number {
	integerOrFloat |
	decimal |
	hexadecimal |
	octal |
	binary
}

Symbol {
	":" (global | localVariable | FunctionName)
}

FunctionName {
	identifier | 
	".." |
	"|" |
	"^" |
	"&" |
	"<=>" |
	"==" |
	"===" |
	"=~" |
	">" |
	">=" |
	"<" |
	"<=" |
	"+" |
	"-" |
	"*" |
	"/" |
	"%" |
	"**" |
	"<<" |
	">>" |
	"~" |
	"+@" |
	"-@" |
	"[]" |
	"[]="
}

@tokens {
	whitespace { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
	//whitespace { std.whitespace+ }

	identifier { std.asciiLetter (std.asciiLetter | std.digit | "_")* }

	LineComment {  "#" ![\n]* }

	BlockComment { "=begin" blockCommentRest }
	blockCommentRest { ![=] blockCommentRest | "=" blockCommentAfterEqual }
	blockCommentAfterEqual { "end" | "=" blockCommentAfterEqual }

	String {
		'"' (![\\\n"] | "\\" _)* '"'? |
		"'" (![\\\n'] | "\\" _)* "'"?
	}

	digit {
		std.digit | "_"
	}

	integerOrFloat {
		(std.digit digit* ("." digit*)? | "." std.digit digit*)
		(("e" | "E") ("+" | "-")? digit+)? |
		std.digit digit* ("i" | "r")
	}

	decimal {
		"0" $[dD] digit+
	}

	hexadecimal {
		"0" $[xX] $[a-fA-F0-9_]+ ("i" | "r")?
	}

	octal {
		"0" $[oO] $[0-7_]+ ("i" | "r")?
	}

	binary {
		"0" $[bB] $[01_]+ ("i" | "r")?
	}

	@precedence { binary, hexadecimal, decimal, octal, integerOrFloat }
}

// Keywords
kw<term> { @specialize[@name={term}]<identifier, term> }

boolean { @specialize[@name=BooleanLiteral]<identifier, "true" | "false"> }
