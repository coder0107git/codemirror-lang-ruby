@precedence {
//  uplus @right
//  squiggle @right,
//  bang @right,
//  power @right,
//  uminus @right,
//  uminusNum @right,
  modulo @left,
  divide @left,
  times @left,
  minus @left,
  plus @left,
//  rightshift @left,
//  leftshirt @left,
//  ampersand @left,
//  caret @left,
//  pipe @left,
//  lessEqual @left,
//  less @left,
//  greaterEquals @left,
//  greater @left,
//  nmatch,
//  match,
//  neq,
//  eq3,
//  eq2,
//  cmp,
//  andop @left,
//  orop @left,
  range,
//  ternary @right,
  rescue @left,
  assign @right
//  defined,
//  not @right,
  and @left,
  or @left,
  in
}

@skip { whitespace | LineComment | BlockComment }

@top Program { top_compstmt }

top_compstmt { top_stmts opt_terms }

top_stmts {
	"" |
    top_stmt |
	top_stmts terms top_stmt
//	error top_stmt
}

top_stmt {
	stmt |
	kw<"BEGIN"> begin_block
}

opt_terms { "" | terms }
terms { term | terms ";" }
term { ";" | "\n" }

stmt {
//	kw<"alias"> fitem fitem
//	| kw<"alias"> tGVAR tGVAR
//	| kw<"alias"> tGVAR tBACK_REF
//	| kw<"alias"> tGVAR tNTH_REF
//	| kw<"undef"> undef_list
//	| stmt modifier_if expr_value
//	| stmt modifier_unless expr_value
//	| stmt modifier_while expr_value
//	| stmt modifier_until expr_value
//	| stmt modifier_rescue stmt
//	| keyword_END '{' compstmt '}'
//	| command_asgn
//	| mlhs '=' lex_ctxt command_call
	lhs '=' lex_ctxt mrhs
//	| mlhs '=' lex_ctxt mrhs_arg
	| expr
}

compstmt { stmts opt_terms }

stmts {
	"" |
	stmt_or_begin |
	stmts terms stmt_or_begin
//	error stmt
}

stmt_or_begin {
	stmt |
	kw<"BEGIN"> begin_block
}

begin_block {
	'{' top_compstmt '}'
}

expr {
//	command_call |
	expr !and kw<"and"> expr |
	expr !or kw<"or"> expr |
//	kw<"not"> opt_nl expr |
//	'!' command_call |
	arg "=>" |
	arg !in kw<"in">
//	arg %prec tLBRACE_ARG
}

user_variable {
	identifier |
	instanceVariable |
	globalVariable |
	constant |
	classVariable
}

nonlocal_var {
	instanceVariable |
	globalVariable
	classVariable
}

arg_rhs {
	arg !assign opAssign |
	arg !rescue kw<"rescue"> arg
}

lhs {
	user_variable |
	keyword_variable
}

keyword_variable {
	kw<"nil"> |
	kw<"self"> |
	boolean |
	kw<"__FILE__"> |
	kw<"__LINE__"> |
	kw<"__ENCODING__">
}

arg {
	lhs !assign "=" arg_rhs |
	arg !range dot2 arg |
	arg !range dot3 arg |
	arg !plus "+" arg |
	arg !minus "-" arg |
	arg !times "*" arg |
	arg !divide "/" arg |
	arg !modulo "%" arg |
	Primary
}

mrhs {
	args ',' arg_value |
	args ',' "*" arg_value |
	"*" arg_value
}

lex_ctxt { "" }

arg_value { arg }

args {
	arg_value |
	"*" arg_value |
	"*" |
	args ',' arg_value |
	args ',' "*" arg_value |
	args ',' "*"
}

Primary {
	literal |
	var_ref |
	ClassDeclaration |
	ModuleDeclaration |
	FunctionDeclaration	
}

var_ref {
	user_variable |
	keyword_variable
}

bodystmt {
	compstmt opt_rescue kw<"else"> compstmt opt_ensure |
	compstmt opt_rescue opt_ensure
}

opt_rescue {
	kw<"rescue"> exc_list exc_var then compstmt opt_rescue |
	""
}

exc_var { "=>" lhs | "" }

then {
	term |
	kw<"then"> |
	term kw<"then">
}

exc_list {
	arg_value |
	mrhs |
	""
}

opt_ensure {
	kw<"ensure"> compstmt |
	""
}

ClassDeclaration {
	kw<"class"> identifier ("<" identifier)? bodystmt kw<"end">
}

ModuleDeclaration {
	kw<"module"> identifier bodystmt kw<"end">
}

FunctionDeclaration {
	kw<"def"> FunctionName ArgDeclaration bodystmt kw<"end">
}

ArgDeclaration {
	"(" ArgumentList ")" |
	ArgumentList term
}

ArgumentList {
	identifier ("," identifier)* ("," restArgument)? ("," closureArgument)? |
	restArgument ("," closureArgument)? |
	closureArgument?
}

restArgument {
	"*" identifier
}

closureArgument {
	"&" identifier
}

literal { Number | Symbol }

Number {
	integerOrFloat |
	decimal |
	hexadecimal |
	octal |
	binary
}

Symbol {
	":" (globalVariable | instanceVariable | classVariable | FunctionName)
}

FunctionName {
	identifier | 
	".." |
	"|" |
	"^" |
	"&" |
	"<=>" |
	"==" |
	"===" |
	"=~" |
	">" |
	">=" |
	"<" |
	"<=" |
	"+" |
	"-" |
	"*" |
	"/" |
	"%" |
	"**" |
	"<<" |
	">>" |
	"~" |
	"+@" |
	"-@" |
	"[]" |
	"[]="
}

@tokens {
	whitespace { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
	//whitespace { std.whitespace+ }

	identifier { std.asciiLetter (std.asciiLetter | std.digit | "_")* }

	instanceVariable { "@" identifier }

	globalVariable { "$" identifier }

	constant { $[A-Z] (std.asciiLetter | std.digit | "_")* }

	classVariable { "@@" identifier }

	@precedence { classVariable, instanceVariable, globalVariable, identifier }

	LineComment {  "#" ![\n]* }

	BlockComment { "=begin" blockCommentRest }
	blockCommentRest { ![=] blockCommentRest | "=" blockCommentAfterEqual }
	blockCommentAfterEqual { "end" | "=" blockCommentAfterEqual }

	String {
		'"' (![\\\n"] | "\\" _)* '"'? |
		"'" (![\\\n'] | "\\" _)* "'"?
	}

	digit {
		std.digit | "_"
	}

	integerOrFloat {
		(std.digit digit* ("." digit*)? | "." std.digit digit*)
		(("e" | "E") ("+" | "-")? digit+)? |
		std.digit digit* ("i" | "r")
	}

	decimal {
		"0" $[dD] digit+
	}

	hexadecimal {
		"0" $[xX] $[a-fA-F0-9_]+ ("i" | "r")?
	}

	octal {
		"0" $[oO] $[0-7_]+ ("i" | "r")?
	}

	binary {
		"0" $[bB] $[01_]+ ("i" | "r")?
	}

	@precedence { binary, hexadecimal, decimal, octal, integerOrFloat }

	opAssign {
		"*=" | "+=" | "-=" | "/=" | "%=" | "**=" | "<<=" | ">>=" | "&&=" | "&=" | "^=" | "|=" | "||="
	}

	dot3 { "..." }
	dot2 {".." }
	@precedence { dot3, dot2 }
}

// Keywords
kw<term> { @specialize[@name={term}]<identifier, term> }

boolean { @specialize[@name=BooleanLiteral]<identifier, "true" | "false"> }
